# -*- coding: utf-8 -*-
"""telecom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13AQZ1ZdVzXc9kqwc1EXAHvdutlT-8zwU
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd #used for data manipulation.
import numpy as np #used for mathematical functions.
import matplotlib.pyplot as plt #used for charts.
import matplotlib
# %matplotlib inline
import seaborn as sns #used for complex charts.

matplotlib.rcParams['font.size'] = 12

from IPython.core.pylabtools import figsize

telecom = pd.read_excel('WA_Fn-UseC_-Telco-Customer-Churn.xlsx')

telecom

telecom.describe()

telecom.Churn.value_counts(normalize='index')*100

telecom.Churn.value_counts()

plt.hist(telecom['Churn'])
plt.title('Churn Graph')
plt.show()

telecom.groupby('Churn')['tenure'].mean()

telecom.groupby('Churn')['tenure'].mean()

telecom.groupby('InternetService')['MonthlyCharges'].mean()

sns.boxplot(x='Churn', y='MonthlyCharges', data=telecom)
plt.show()

telecom.corr()

telecom2 = telecom.copy()

telecom2

telecom2['Churn'].replace(['No', 'Yes'],
                        [0, 1], inplace=True)

telecom2



telecom2.isna().count()

telecom2['PhoneService'].replace(['No', 'Yes'],
                        [0, 1], inplace=True)

telecom2['StreamingTV'].replace(['No', 'Yes', 'No internet service'],
                        [0, 1, 2], inplace=True)

telecom2['InternetService'].replace(['No', 'DSL', 'Fiber optic'],
                        [0, 1, 2], inplace=True)

telecom2.head(20)

telecom2.corr()

plt.figure(figsize= (10,6))
corrMatrix = telecom2.corr()
sns.heatmap(corrMatrix, annot=True)
plt.title('Correlation between Services and Churn')
plt.show()

telecom2.groupby('Churn')['InternetService'].count()

telecom.groupby('InternetService')['Churn'].count()

pd.crosstab(telecom.Churn, telecom.InternetService, margins=True)

pd.crosstab(telecom.Churn, telecom.InternetService, margins=True, normalize='index')*100

pd.crosstab(telecom2.Churn, telecom2.InternetService, margins=True)

pd.crosstab(telecom2.Churn, telecom2.Contract, margins=True)

tab = pd.crosstab(telecom['Churn'], telecom['Contract'],margins=True).sort_values('All',ascending=True)
tab = tab.drop('All',axis=1)
tab = tab.drop('All',axis=0)

tab.plot(kind='bar', stacked=False, figsize=(8,6))
plt.title('Contract vs Churn')
plt.show()

tab = pd.crosstab(telecom['Churn'], telecom['InternetService'],margins=True, normalize='index')*100
#tab = tab.drop('All',axis=1)
#tab = tab.drop('All',axis=0)

tab.plot(kind='bar', stacked=False, figsize=(8,6))
plt.show()

import seaborn as sns

sns.barplot(x= 'Churn', y='InternetService', hue='PhoneService', data=telecom2, saturation=0.8)
plt.title('Customers with Internet and Phone Services Churn')
plt.show()

tab = pd.crosstab(telecom['Churn'], telecom['InternetService'],margins=True).sort_values('All',ascending=True)
tab = tab.drop('All',axis=1)
tab = tab.drop('All',axis=0)

tab.plot(kind='bar', stacked=False, figsize=(8,5))
plt.show()

tab = pd.crosstab(telecom['Churn'], telecom['PhoneService'],margins=True).sort_values('All',ascending=True)
tab = tab.drop('All',axis=1)
tab = tab.drop('All',axis=0)

tab.plot(kind='bar', stacked=False, figsize=(8,5))
plt.show()

plt.scatter(telecom2['MonthlyCharges'], telecom2['Churn'], cmap='rainbow');

# Commented out IPython magic to ensure Python compatibility.
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
#sklearn modules for Model Evaluation & Improvement:
    
from sklearn.metrics import confusion_matrix, accuracy_score 
from sklearn.metrics import f1_score, precision_score, recall_score, fbeta_score
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import ShuffleSplit
from sklearn.model_selection import KFold
from sklearn import feature_selection
from sklearn import model_selection
from sklearn import metrics
from sklearn.metrics import classification_report, precision_recall_curve
from sklearn.metrics import auc, roc_auc_score, roc_curve
from sklearn.metrics import make_scorer, recall_score, log_loss
from sklearn.metrics import average_precision_score
#Standard libraries for data visualization:
import seaborn as sn
from matplotlib import pyplot
import matplotlib.pyplot as plt
import matplotlib.pylab as pylab
import matplotlib 
# %matplotlib inline
color = sn.color_palette()
import matplotlib.ticker as mtick
from IPython.display import display
pd.options.display.max_columns = None
from pandas.plotting import scatter_matrix
from sklearn.metrics import roc_curve
#Miscellaneous Utilitiy Libraries:
    
import random
import os
import re
import sys
import timeit
import string
import time
from datetime import datetime
from time import time
from dateutil.parser import parse
import joblib

correlations = telecom2.corrwith(telecom2.Churn)
correlations = correlations[correlations!=1]
correlations.plot.bar(
        figsize = (10, 6), 
        fontsize = 10, 
        color = 'green',
        rot = 30, grid = True)
plt.title('Correlation with Churn Rate \n',
horizontalalignment="center", fontstyle = "normal", 
fontsize = "22", fontfamily ="Times New Roman")
plt.show()

sns.pairplot(data = telecom2, hue='Churn')
plt.show()



cat_features = telecom2.drop(['customerID','TotalCharges','MonthlyCharges','SeniorCitizen','tenure'],axis=1)

cat_features.head()

from sklearn import preprocessing

le = preprocessing.LabelEncoder()
df_cat = cat_features.apply(le.fit_transform)
df_cat.head()

num_features = telecom2[['customerID','MonthlyCharges','SeniorCitizen','tenure']]
finaldf = pd.merge(num_features, df_cat, left_index=True, right_index=True)

from sklearn.model_selection import train_test_split

finaldf = finaldf.dropna()
finaldf = finaldf.drop(['customerID'],axis=1)

X = finaldf.drop(['Churn'],axis=1)
y = finaldf['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(random_state=46)
rf.fit(X_train,y_train)

from sklearn.metrics import accuracy_score

preds = rf.predict(X_test)
print(accuracy_score(preds,y_test))